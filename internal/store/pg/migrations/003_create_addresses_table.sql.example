-- CREATE TYPE ADDRESS_KIND AS ENUM (
--   'residencial',
--   'comercial'
-- );

-- CREATE TABLE IF NOT EXISTS tenant_address (
--   "id" UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(),
--   "street" TEXT NOT NULL,
--   "number" TEXT NOT NULL,
--   "district" TEXT NOT NULL,
--   "city" TEXT NOT NULL,
--   "cep" CHAR(9) NOT NULL,
--   "kind" ADDRESS_KIND NOT NULL,
--   "fulladdress" TEXT UNIQUE,
--   "tenant_id" UUID NOT NULL,
--   CONSTRAINT fk_tenant_tenant_id
--     FOREIGN KEY (tenant_id)
--       REFERENCES tenant (id)
-- );

-- CREATE TABLE IF NOT EXISTS owner_address (
--   "id" UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(),
--   "street" TEXT NOT NULL,
--   "number" TEXT NOT NULL,
--   "district" TEXT NOT NULL,
--   "city" TEXT NOT NULL,
--   "cep" CHAR(9) NOT NULL,
--   "kind" ADDRESS_KIND NOT NULL,
--   "fulladdress" TEXT UNIQUE,
--   "owner_id" UUID NOT NULL,
--   CONSTRAINT fk_owner_owner_id
--     FOREIGN KEY (owner_id)
--       REFERENCES owner (id)
-- );

-- CREATE OR REPLACE FUNCTION update_fulladdress()
-- RETURNS TRIGGER AS $$
-- BEGIN
--   NEW.fulladdress := NEW.street || ', nÂ° ' || NEW.number || ', ' || NEW.district || ', ' || NEW.city || ', ' || NEW.cep;
--   RETURN NEW;
-- END;
-- $$ LANGUAGE plpgsql;

-- CREATE TRIGGER trigger_update_fulladdress_of_tenant_address
-- BEFORE INSERT OR UPDATE ON tenant_address
-- FOR EACH ROW
-- EXECUTE FUNCTION update_fulladdress();

-- CREATE TRIGGER trigger_update_fulladdress_of_owner_address
-- BEFORE INSERT OR UPDATE ON owner_address
-- FOR EACH ROW
-- EXECUTE FUNCTION update_fulladdress();

-- ---- create above / drop below ----

DROP TRIGGER IF EXISTS trigger_update_fulladdress_of_tenant_address ON tenant_address;
DROP TRIGGER IF EXISTS trigger_update_fulladdress_of_owner_address ON owner_address;
DROP FUNCTION IF EXISTS update_fulladdress;
DROP TABLE IF EXISTS owner_address;
DROP TABLE IF EXISTS tenant_address;
DROP TYPE IF EXISTS ADDRESS_KIND;

