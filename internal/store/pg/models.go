// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package pg

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
)

type MaritalStatus string

const (
	MaritalStatusSolteiroa   MaritalStatus = "solteiro(a)"
	MaritalStatusCasadoa     MaritalStatus = "casado(a)"
	MaritalStatusAmasiadoa   MaritalStatus = "amasiado(a)"
	MaritalStatusDivorciadoa MaritalStatus = "divorciado(a)"
	MaritalStatusVivoa       MaritalStatus = "vi√∫vo(a)"
)

func (e *MaritalStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MaritalStatus(s)
	case string:
		*e = MaritalStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for MaritalStatus: %T", src)
	}
	return nil
}

type NullMaritalStatus struct {
	MaritalStatus MaritalStatus `json:"marital_status"`
	Valid         bool          `json:"valid"` // Valid is true if MaritalStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMaritalStatus) Scan(value interface{}) error {
	if value == nil {
		ns.MaritalStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MaritalStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMaritalStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MaritalStatus), nil
}

type Tenant struct {
	ID            uuid.UUID     `json:"id"`
	Fullname      string        `json:"fullname"`
	Rg            string        `json:"rg"`
	Cpf           string        `json:"cpf"`
	Occupation    string        `json:"occupation"`
	MaritalStatus MaritalStatus `json:"marital_status"`
}
