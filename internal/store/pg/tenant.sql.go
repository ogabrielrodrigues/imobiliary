// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tenant.sql

package pg

import (
	"context"

	"github.com/google/uuid"
)

const deleteTenant = `-- name: DeleteTenant :exec

DELETE FROM tenant
WHERE id = $1
`

// -------------------------------
func (q *Queries) DeleteTenant(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteTenant, id)
	return err
}

const getTenant = `-- name: GetTenant :one
SELECT
  id, fullname, rg, cpf, occupation, marital_status
FROM tenant
WHERE id = $1
`

func (q *Queries) GetTenant(ctx context.Context, id uuid.UUID) (Tenant, error) {
	row := q.db.QueryRow(ctx, getTenant, id)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Rg,
		&i.Cpf,
		&i.Occupation,
		&i.MaritalStatus,
	)
	return i, err
}

const getTenants = `-- name: GetTenants :many

SELECT
  id, fullname, rg, cpf, occupation, marital_status
FROM tenant
`

// -------------------------------
func (q *Queries) GetTenants(ctx context.Context) ([]Tenant, error) {
	rows, err := q.db.Query(ctx, getTenants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tenant
	for rows.Next() {
		var i Tenant
		if err := rows.Scan(
			&i.ID,
			&i.Fullname,
			&i.Rg,
			&i.Cpf,
			&i.Occupation,
			&i.MaritalStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertTenant = `-- name: InsertTenant :one

INSERT INTO tenant
  (fullname, rg, cpf, occupation, marital_status) VALUES
  ($1, $2, $3, $4, $5)
RETURNING id
`

type InsertTenantParams struct {
	Fullname      string        `json:"fullname"`
	Rg            string        `json:"rg"`
	Cpf           string        `json:"cpf"`
	Occupation    string        `json:"occupation"`
	MaritalStatus MaritalStatus `json:"marital_status"`
}

// -------------------------------
func (q *Queries) InsertTenant(ctx context.Context, arg InsertTenantParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertTenant,
		arg.Fullname,
		arg.Rg,
		arg.Cpf,
		arg.Occupation,
		arg.MaritalStatus,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateTenant = `-- name: UpdateTenant :exec

UPDATE tenant SET
  fullname = $1,
  rg = $2,
  cpf = $3,
  occupation = $4,
  marital_status = $5
WHERE id = $6
`

type UpdateTenantParams struct {
	Fullname      string        `json:"fullname"`
	Rg            string        `json:"rg"`
	Cpf           string        `json:"cpf"`
	Occupation    string        `json:"occupation"`
	MaritalStatus MaritalStatus `json:"marital_status"`
	ID            uuid.UUID     `json:"id"`
}

// -------------------------------
func (q *Queries) UpdateTenant(ctx context.Context, arg UpdateTenantParams) error {
	_, err := q.db.Exec(ctx, updateTenant,
		arg.Fullname,
		arg.Rg,
		arg.Cpf,
		arg.Occupation,
		arg.MaritalStatus,
		arg.ID,
	)
	return err
}
